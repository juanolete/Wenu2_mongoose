// Arduino Adafruit_PWMServoDriver library API. Source C API is defined at:
// [mgos_arduino_PWMServoDriver.h]

let Adafruit_PWMServoDriver = {
  _create: ffi('void *mgos_PWMServoDriver_create(void)'),
  _close: ffi('void mgos_PWMServoDriver_close(void *)'),
  _begin: ffi('void mgos_PWMServoDriver_begin(void *)'),
  _setPWMFreq: ffi('void mgos_PWMServoDriver_setPWMFreq(void *, int)'),
  _setPWM: ffi('void mgos_PWMServoDriver_setPWM(void *, int , int , int)'),
  _setPin: ffi('void mgos_PWMServoDriver_setPin(void *, int , int , bool)'),
  _getPWM: ffi('int mgos_PWMServoDriver_getPWM(void *, int)'),

  // ## **`Adafruit_PWMServoDriver.create()`**
  // Create an instance of PWM servo driver, which has the methods described
  // below.
  //
  // Example:
  // ```javascript
  // load("api_pwm_servo.js");
  // let myServo = Adafruit_PWMServoDriver.create();
  // ```
  create: function() {
    let obj = Object.create(Adafruit_PWMServoDriver._proto);
    obj.pwm = Adafruit_PWMServoDriver._create();
    return obj;
  },

  _proto: {
    // ## **`myServo.close()`**
    // Close a servo instance; no other methods can be called on this instance
    // after calling `close()`.
    // Return value: none.
    close: function() {
      return Adafruit_PWMServoDriver._close(this.pwm);
    },

    // ## **`myServo.begin()`**
    // Reset onewire and servo state.
    // Return value: none.
    begin: function() {
      return Adafruit_PWMServoDriver._begin(this.pwm);
    },

    // ## **`myServo.setPWMFreq(freq)`**
    // This function can be used to adjust the PWM frequency (from 40 to 1000
    // Hz), which determines how many full 'pulses' per second are generated by
    // the IC. Stated differently, the frequency determines how 'long' each
    // pulse is in duration from start to finish, taking into account both the
    // high and low segments of the pulse.
    //
    // Frequency is important in PWM, since setting the frequency too high with
    // a very small duty cycle can cause problems, since the 'rise time' of the
    // signal (the time it takes to go from 0V to VCC) may be longer than the
    // time the signal is active, and the PWM output will appear smoothed out
    // and may not even reach VCC, potentially causing a number of problems.
    //
    // Return value: none.
    //
    // Example:
    // ```javascript
    // load("api_pwm_servo.js");
    // let myServo = Adafruit_PWMServoDriver.create();
    // myServo.begin();
    // myServo.setPWMFreq(100);
    // ```
    setPWMFreq: function(freq) {
      return Adafruit_PWMServoDriver._setPWMFreq(this.pwm, freq);
    },

    // ## **`myServo.setPWM(channel, on, off)`**
    // This function sets the start (`on`) and end (`off`) of the high segment of
    // the PWM pulse on a specific channel. You specify the 'tick' value
    // between 0..4095 when the signal will turn on, and when it will turn of.
    // `channel` (a number from `0` to `15`) indicates which of the 16 PWM
    // outputs should be updated with the new values.
    //
    // Return value: none.
    //
    // Example:
    // ```javascript
    // load("api_pwm_servo.js");
    // let myServo = Adafruit_PWMServoDriver.create();
    // myServo.begin();
    // // Generate square wave at 100 Hz
    // myServo.setPWMFreq(100);
    // myServo.setPWM(0, 0, 2047);
    // ```
    setPWM: function(inum, on, off) {
      return Adafruit_PWMServoDriver._setPWM(this.pwm, inum, on, off);
    },

    // ## **`myServo.setPin(channel, val, invert)`**
    // This is a wrapper for `myServo.setPWM()`, where `on` will always be 0,
    // and `off` is the `val` given to this function. Additionally, `invert`
    // can be set to `true` to invert the output.
    //
    // Return value: none.
    //
    // Example:
    // ```javascript
    // load("api_pwm_servo.js");
    // let myServo = Adafruit_PWMServoDriver.create();
    // myServo.begin();
    // // Generate square wave at 100 Hz
    // myServo.setPWMFreq(100);
    // myServo.setPin(0, 2047, false);
    // ```
    setPin: function(num, val, invert) {
      return Adafruit_PWMServoDriver._setPin(this.pwm, num, val, invert);
    },

    // ## **`myServo.getPWM(channel)`**
    getPWM: function(num) {
      return Adafruit_PWMServoDriver._getPWM(this.pwm, num);
    },
  },
}
